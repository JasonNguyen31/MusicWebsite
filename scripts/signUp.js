document.addEventListener('DOMContentLoaded', function() {
    // Ki·ªÉm tra xem modal ƒë√£ ƒë∆∞·ª£c th√™m v√†o DOM ch∆∞a
    const modalExists = document.getElementById('signup-modal');
    
    if (!modalExists) {
        console.error('Modal ƒëƒÉng k√Ω kh√¥ng t·ªìn t·∫°i trong DOM');
        return;
    }

    // L·∫•y c√°c ph·∫ßn t·ª≠ DOM
    const modal = document.getElementById('signup-modal');
    const closeButton = document.querySelector('.close-modal');
    const createAccountButtons = document.querySelectorAll('.create-account, .create-account-btn');
    
    // ƒê·ªëi t∆∞·ª£ng l∆∞u tr·ªØ m√£ qu·ªëc gia ƒëi·ªán tho·∫°i
    const phoneCountryCodes = {
        'VN': '+84',
        'US': '+1',
        'UK': '+44',
        'FR': '+33',
        'DE': '+49',
        'JP': '+81',
        'AU': '+61'
    };

    // Kh·ªüi t·∫°o c√°c tr∆∞·ªùng ng√†y/nƒÉm
    initializeDateDropdowns();
    
    // Th√™m s·ª± ki·ªán change cho tr∆∞·ªùng qu·ªëc gia ƒë·ªÉ c·∫≠p nh·∫≠t m√£ qu·ªëc gia ƒëi·ªán tho·∫°i
    const countrySelect = document.getElementById('country');
    const phoneInput = document.getElementById('phone');
    
    // T·∫°o ph·∫ßn t·ª≠ hi·ªÉn th·ªã m√£ qu·ªëc gia
    const phoneContainer = document.createElement('div');
    phoneContainer.className = 'phone-container';
    phoneInput.parentNode.insertBefore(phoneContainer, phoneInput);
    phoneContainer.appendChild(phoneInput);
    
    const countryCodeSpan = document.createElement('span');
    countryCodeSpan.className = 'country-code';
    phoneContainer.insertBefore(countryCodeSpan, phoneInput);

    phoneInput.setAttribute('maxlength', '9');
    phoneInput.setAttribute('pattern', '[0-9]*');
    phoneInput.setAttribute('inputmode', 'numeric');

    // Th√™m CSS cho phone container
    const style = document.createElement('style');
    style.textContent = `
          .phone-container {
                display: flex;
                align-items: center;
                width: 100%;
          }
          .country-code {
                display: inline-block;
                padding: 10px 8px;
                border: 1px solid #ddd;
                border-right: none;
                border-radius: 4px 0 0 4px;
                background-color: #f5f5f5;
                font-size: 16px;
                color: #333;
                min-width: 50px;
                text-align: center;
          }
          #phone {
                border-top-left-radius: 0;
                border-bottom-left-radius: 0;
                flex: 1;
          }
          .error-message {
                color: #ff3333;
                font-size: 14px;
                margin-top: 5px;
                display: none;
          }
          .input-error {
                border-color: #ff3333;
          }
          .password-wrapper {
                position: relative;
                width: 100%;
          }
          .toggle-password {
                position: absolute;
                right: 10px;
                top: 50%;
                transform: translateY(-50%);
                cursor: pointer;
                user-select: none;
          }
          /* Success popup styling */
          .success-popup {
                display: none;
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background-color: #fff;
                padding: 20px;
                border-radius: 5px;
                box-shadow: 0 4px 15px rgba(0,0,0,0.2);
                z-index: 1001; 
                text-align: center;
          }
          .success-popup h3 {
                color: #4CAF50;
                margin-bottom: 15px;
          }
          .success-popup button {
                margin-top: 15px;
                padding: 8px 15px;
                background-color: #4CAF50;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
          }
          .popup-overlay {
                display: none;
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0,0,0,0.5);
                z-index: 1000;
          }
          /* Th√™m hi·ªáu ·ª©ng cho modal */
          #signup-modal {
                opacity: 0;
                transition: opacity 0.3s ease;
          }
          #signup-modal.visible {
                opacity: 1;
          }
    `;
    document.head.appendChild(style);

    // T·∫°o ph·∫ßn t·ª≠ hi·ªÉn th·ªã l·ªói cho c√°c tr∆∞·ªùng
    const fields = ['fullname', 'username', 'phone', 'password', 'confirm-password'];
    fields.forEach(field => {
          const input = document.getElementById(field);
          const errorSpan = document.createElement('span');
          errorSpan.className = 'error-message';
          errorSpan.id = `${field}-error`;
          input.parentNode.appendChild(errorSpan);
    });

    function createPasswordToggle(passwordFieldId) {
          const passwordField = document.getElementById(passwordFieldId);
          const wrapper = document.createElement('div');
          wrapper.className = 'password-wrapper';
          
          // ƒê·∫∑t input v√†o wrapper
          passwordField.parentNode.insertBefore(wrapper, passwordField);
          wrapper.appendChild(passwordField);
          
          // T·∫°o n√∫t toggle
          const toggleButton = document.createElement('span');
          toggleButton.className = 'toggle-password';
          toggleButton.innerHTML = 'üëÅÔ∏è';
          toggleButton.addEventListener('click', function() {
                if (passwordField.type === 'password') {
                      passwordField.type = 'text';
                      toggleButton.innerHTML = 'üëÅÔ∏è‚Äçüó®Ô∏è';
                } else {
                      passwordField.type = 'password';
                      toggleButton.innerHTML = 'üëÅÔ∏è';
                }
          });
          
          wrapper.appendChild(toggleButton);
    }

    createPasswordToggle('password');
    createPasswordToggle('confirm-password');

    // T·∫°o popup th√†nh c√¥ng
    const successPopup = document.createElement('div');
    successPopup.className = 'success-popup';
    successPopup.innerHTML = `
          <h3>Registration Successful!</h3>
          <p>Thank you for signing up!!! Your account has been successfully created.</p>
          <button id="close-success-popup">Close</button>
    `;

    document.body.appendChild(successPopup);

    const popupOverlay = document.createElement('div');
    popupOverlay.className = 'popup-overlay';
    document.body.appendChild(popupOverlay);

    document.getElementById('close-success-popup').addEventListener('click', function() {
          successPopup.style.display = 'none';
          popupOverlay.style.display = 'none';
          // ƒê√≥ng modal ƒëƒÉng k√Ω
          closeModal();
    });

    // NgƒÉn ch·∫∑n validation m·∫∑c ƒë·ªãnh c·ªßa HTML5
    const form = document.getElementById('signup-form');
    if (form) {
          // T·∫Øt validation m·∫∑c ƒë·ªãnh c·ªßa HTML5
          form.setAttribute('novalidate', '');
    
          // Th√™m s·ª± ki·ªán input cho t·∫•t c·∫£ c√°c tr∆∞·ªùng input required
          const requiredInputs = form.querySelectorAll('input[required], select[required]');
          requiredInputs.forEach(input => {
                // B·ªè thu·ªôc t√≠nh required ƒë·ªÉ tr√°nh th√¥ng b√°o m·∫∑c ƒë·ªãnh
                input.removeAttribute('required');
                
                // Th√™m class ƒë·ªÉ ƒë√°nh d·∫•u l√† tr∆∞·ªùng b·∫Øt bu·ªôc (cho CSS)
                input.classList.add('required-field');
                
                // Th√™m s·ª± ki·ªán ƒë·ªÉ validate khi thay ƒë·ªïi gi√° tr·ªã
                input.addEventListener('input', function(e) {
                      validateField(this);
                });
                
                input.addEventListener('blur', function(e) {
                      validateField(this);
                });
          });
    }

    // Ki·ªÉm tra t√™n ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i ch∆∞a
    const usernameInput = document.getElementById('username');
    
    // Ki·ªÉm tra t√™n t√†i kho·∫£n trong khi ng∆∞·ªùi d√πng nh·∫≠p
    usernameInput.addEventListener('input', function() {
        checkUsernameFormat(this.value);
    });
    
    // Ki·ªÉm tra t√™n t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i sau khi ng∆∞·ªùi d√πng r·ªùi kh·ªèi tr∆∞·ªùng
    usernameInput.addEventListener('blur', function() {
        if (this.value.trim() !== '') {
            // Ki·ªÉm tra format tr∆∞·ªõc
            if (checkUsernameFormat(this.value)) {
                // N·∫øu format h·ª£p l·ªá th√¨ m·ªõi ki·ªÉm tra s·ª± t·ªìn t·∫°i
                checkExistingUsername(this.value);
            }
        }
    });
    
    // H√†m ki·ªÉm tra ƒë·ªãnh d·∫°ng t√™n t√†i kho·∫£n
    function checkUsernameFormat(username) {
        const errorSpan = document.getElementById('username-error');
        const hasAccent = /[√°√†·∫£√£·∫°ƒÉ·∫Ø·∫±·∫≥·∫µ·∫∑√¢·∫•·∫ß·∫©·∫´·∫≠√©√®·∫ª·∫Ω·∫π√™·∫ø·ªÅ·ªÉ·ªÖ·ªá√≠√¨·ªâƒ©·ªã√≥√≤·ªè√µ·ªç√¥·ªë·ªì·ªï·ªó·ªô∆°·ªõ·ªù·ªü·ª°·ª£√∫√π·ªß≈©·ª•∆∞·ª©·ª´·ª≠·ªØ·ª±√Ω·ª≥·ª∑·ªπ·ªµƒë√Å√Ä·∫¢√É·∫†ƒÇ·∫Æ·∫∞·∫≤·∫¥·∫∂√Ç·∫§·∫¶·∫®·∫™·ªÜ√â√à·∫∫·∫º·∫∏√ä·∫æ·ªÄ·ªÇ·ªÑ·ªÜ√ç√å·ªàƒ®·ªä√ì√í·ªé√ï·ªå√î·ªê·ªí·ªî·ªñ·ªò∆†·ªö·ªú·ªû·ª†·ª¢√ö√ô·ª¶≈®·ª§∆Ø·ª®·ª™·ª¨·ªÆ·ª∞√ù·ª≤·ª∂·ª∏·ª¥ƒê]/;
        
        if (hasAccent.test(username)) {
            errorSpan.textContent = 'Account name cannot contain accents';
            errorSpan.style.display = 'block';
            usernameInput.classList.add('input-error');
            return false;
        } else {
            // N·∫øu kh√¥ng c√≥ l·ªói v·ªÅ d·∫•u, x√≥a th√¥ng b√°o l·ªói
            errorSpan.style.display = 'none';
            usernameInput.classList.remove('input-error');
            return true;
        }
    }

    // H√†m ki·ªÉm tra t√™n ng∆∞·ªùi d√πng tr√™n server
    function checkExistingUsername(username) {
        console.log("Checking if username exists:", username);
        const formData = new FormData();
        formData.append('check_username', username);
        
        fetch('model/checkUsername.php', {
            method: 'POST',
            body: formData
        })
        .then(response => response.text())
        .then(data => {
            console.log("Username check response:", data);
            const errorSpan = document.getElementById('username-error');
            if (data.trim() === 'exists') {
                console.log("Username already exists");
                errorSpan.textContent = 'This account name is already in use';
                errorSpan.style.display = 'block';
                usernameInput.classList.add('input-error');
            }
        })
        .catch(error => {
            console.error('Username check error:', error);
        });
    }

    phoneInput.addEventListener('input', function() {
          // Ch·ªâ gi·ªØ l·∫°i c√°c k√Ω t·ª± s·ªë
          this.value = this.value.replace(/\D/g, '');

          // X√≥a s·ªë 0 ·ªü ƒë·∫ßu n·∫øu c√≥
          if (this.value.startsWith('0')) {
              this.value = this.value.replace(/^0+/, '');
          }
    });

    // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i ch∆∞a
    phoneInput.addEventListener('blur', function() {
        if (this.value.trim() !== '' && this.value.length === 9) {
            checkExistingPhone(this.value);
        }
    });

    // H√†m ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i tr√™n server
    function checkExistingPhone(phone) {
        console.log("Checking if phone exists:", phone);
        const formData = new FormData();

        // L·∫•y m√£ qu·ªëc gia v√† s·ªë ƒëi·ªán tho·∫°i
        const countryCode = document.querySelector('.country-code').textContent;
        const fullPhone = countryCode + phone;
        formData.append('check_phone', fullPhone);
        
        fetch('model/checkPhone.php', {
            method: 'POST',
            body: formData
        })
        .then(response => response.text())
        .then(data => {
            console.log("Phone check response:", data);
            const errorSpan = document.getElementById('phone-error');
            if (data.trim() === 'exists') {
                console.log("Phone already exists");
                errorSpan.textContent = 'Phone number is used';
                errorSpan.style.display = 'block';
                phoneInput.classList.add('input-error');
            }
        })
        .catch(error => {
            console.error('L·ªói ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i:', error);
        });
    }

    // C·∫≠p nh·∫≠t m√£ qu·ªëc gia khi thay ƒë·ªïi qu·ªëc gia
    countrySelect.addEventListener('change', function() {
          updateCountryCode();
          
          // ƒê·∫£m b·∫£o r·∫±ng s·ªë ƒëi·ªán tho·∫°i hi·ªán t·∫°i kh√¥ng c√≥ s·ªë 0 ·ªü ƒë·∫ßu
          if (phoneInput.value.startsWith('0')) {
                phoneInput.value = phoneInput.value.replace(/^0+/, '');
          }
    });

    // H√†m c·∫≠p nh·∫≠t m√£ qu·ªëc gia
    function updateCountryCode() {
          const selectedCountry = countrySelect.value;
          if (selectedCountry && phoneCountryCodes[selectedCountry]) {
                countryCodeSpan.textContent = phoneCountryCodes[selectedCountry];
          } else {
                countryCodeSpan.textContent = '';
          }
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u theo th·ªùi gian th·ª±c
    const passwordInput = document.getElementById('password');
    passwordInput.addEventListener('input', function() {
          validatePasswordStrength(this.value);
    });

    // Th√™m s·ª± ki·ªán blur ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o l·ªói khi focus ra kh·ªèi tr∆∞·ªùng
    passwordInput.addEventListener('blur', function() {
          validatePasswordStrength(this.value);
    });

    // M·ªü modal khi b·∫•m v√†o b·∫•t k·ª≥ n√∫t "Create account" n√†o
    createAccountButtons.forEach(button => {
          button.addEventListener('click', () => {
                openModal();
          });
    });

    // H√†m m·ªü modal v·ªõi hi·ªáu ·ª©ng
    function openModal() {
        const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
        document.documentElement.style.setProperty('--scrollbar-width', scrollbarWidth + 'px');
        document.body.classList.add('modal-open');
        modal.style.display = 'block';
        
        // Th√™m hi·ªáu ·ª©ng fade in
        setTimeout(() => {
            modal.classList.add('visible');
        }, 10);
        
        updateCountryCode();
        resetForm();
    }
    
    function closeModal() {
        modal.classList.remove('visible');
        
        // ƒê·ª£i k·∫øt th√∫c animation
        setTimeout(() => {
            modal.style.display = 'none';
            document.body.classList.remove('modal-open');
        }, 300);
        
        resetForm();
    }

    // ƒê√≥ng modal khi b·∫•m v√†o n√∫t X
    closeButton.addEventListener('click', () => {
        closeModal();
    });

    // ƒê√≥ng modal khi b·∫•m ra ngo√†i
    const modalContent = modal.querySelector('.modal-register-content');

    let isDragging = false;

    // N·∫øu b·∫Øt ƒë·∫ßu click v√†o modal (b√™n ngo√†i form), ƒë√°nh d·∫•u l√† "b·∫Øt ƒë·∫ßu k√©o"
    modal.addEventListener('mousedown', (e) => {
          if (!modalContent.contains(e.target)) {
                isDragging = true;
          }
    });
    
    modal.addEventListener('mouseup', (e) => {
          // N·∫øu b·∫Øt ƒë·∫ßu l√† k√©o (mousedown) v√† th·∫£ ra ƒë√∫ng v√πng modal ‚Üí m·ªõi ƒë√≥ng
          if (isDragging && !modalContent.contains(e.target)) {
                closeModal();
          }
          isDragging = false;
    });

    // H√†m kh·ªüi t·∫°o dropdown cho ng√†y v√† nƒÉm
    function initializeDateDropdowns() {
          // Kh·ªüi t·∫°o dropdown ng√†y
          const daySelect = document.getElementById('dob-day');
          for (let day = 1; day <= 31; day++) {
                const option = document.createElement('option');
                option.value = day;
                option.textContent = day;
                daySelect.appendChild(option);
          }
          
          // Kh·ªüi t·∫°o dropdown nƒÉm
          const yearSelect = document.getElementById('dob-year');
          const currentYear = new Date().getFullYear();
          for (let year = currentYear; year >= currentYear - 100; year--) {
                const option = document.createElement('option');
                option.value = year;
                option.textContent = year;
                yearSelect.appendChild(option);
          }
    }

    // H√†m validate t·ª´ng tr∆∞·ªùng
    function validateField(field) {
        const id = field.id;
        const value = field.value.trim();
        console.log(`Validating ${id}: (type: ${field.type}, nodeName: ${field.nodeName})`);
        console.log(`Value: "${value}", Is Checkbox: ${field.type === 'checkbox'}, Is checked: ${field.checked}`);
        const errorSpan = document.getElementById(`${id}-error`);
        
        if (!errorSpan) return true; // N·∫øu kh√¥ng c√≥ error span, coi nh∆∞ field valid
        
        // X√≥a th√¥ng b√°o l·ªói tr∆∞·ªõc ƒë√≥
        errorSpan.style.display = 'none';
        field.classList.remove('input-error');
        
        // V·ªõi checkbox c·∫ßn ki·ªÉm tra checked thay v√¨ value
        if (field.type === 'checkbox') {
            return true; // Checkbox s·∫Ω ƒë∆∞·ª£c ki·ªÉm tra ri√™ng ·ªü h√†m validateForm
        }
        
        // V·ªõi select box (nh∆∞ country, date fields) 
        if (field.nodeName === 'SELECT' && value) {
            return true; // Select c√≥ gi√° tr·ªã l√† h·ª£p l·ªá
        }

        // Ki·ªÉm tra tr∆∞·ªùng tr·ªëng
        if (!value) {
            let errorMsg = 'Please do not leave this field blank!';
        
            // ƒêi·ªÅu ch·ªânh th√¥ng b√°o theo tr∆∞·ªùng c·ª• th·ªÉ
            switch(id) {
                    case 'fullname':
                        errorMsg = 'Full name cannot be blank';
                        break;
                    case 'username':
                        errorMsg = 'Account name cannot be blank';
                        break;
                    case 'phone':
                        errorMsg = 'Phone number cannot be blank';
                        break;
                    case 'password':
                        errorMsg = 'Password cannot be blank';
                        break;
                    case 'confirm-password':
                        errorMsg = 'Confirm password cannot be blank';
                        break;
            }
        
            errorSpan.textContent = errorMsg;
            errorSpan.style.display = 'block';
            field.classList.add('input-error');
            return false;
        }
        
        // Ki·ªÉm tra ri√™ng cho t√™n t√†i kho·∫£n (kh√¥ng ƒë∆∞·ª£c c√≥ d·∫•u)
        if (id === 'username') {
            return checkUsernameFormat(value);
        }
        
        // Ki·ªÉm tra ri√™ng cho s·ªë ƒëi·ªán tho·∫°i
        if (id === 'phone' && value.length !== 9) {
            errorSpan.textContent = 'Phone number must have 9 digits';
            errorSpan.style.display = 'block';
            field.classList.add('input-error');
            return false;
        }
        
        // Ki·ªÉm tra ri√™ng cho m·∫≠t kh·∫©u
        if (id === 'password') {
            return validatePasswordStrength(value);
        }
        
        // Ki·ªÉm tra x√°c nh·∫≠n m·∫≠t kh·∫©u
        if (id === 'confirm-password') {
            const password = document.getElementById('password').value;
            if (value !== password) {
                    errorSpan.textContent = 'Password and confirm password do not match!';
                    errorSpan.style.display = 'block';
                    field.classList.add('input-error');
                    return false;
            }
        }
        
        return true;
    }
    
    // H√†m ki·ªÉm tra ƒë·ªô m·∫°nh c·ªßa m·∫≠t kh·∫©u
    function validatePasswordStrength(password) {
          const passwordInput = document.getElementById('password');
          const errorSpan = document.getElementById('password-error');
          
          // N·∫øu tr∆∞·ªùng tr·ªëng, kh√¥ng hi·ªÉn th·ªã l·ªói v·ªÅ ƒë·ªô m·∫°nh m·∫≠t kh·∫©u
          if (!password) {
                errorSpan.textContent = 'Password can not be blank';
                errorSpan.style.display = 'block';
                passwordInput.classList.add('input-error');
                return false;
          }
          
          // Ki·ªÉm tra ƒë·ªô d√†i
          if (password.length < 6) {
                errorSpan.textContent = 'Password must be at least 6 characters';
                errorSpan.style.display = 'block';
                passwordInput.classList.add('input-error');
                return false;
          }
          
          // M·∫≠t kh·∫©u h·ª£p l·ªá
          errorSpan.style.display = 'none';
          passwordInput.classList.remove('input-error');
          return true;
    }

    // H√†m reset t·∫•t c·∫£ th√¥ng b√°o l·ªói
    function resetErrorMessages() {
          const errorMessages = document.querySelectorAll('.error-message');
          const inputFields = document.querySelectorAll('input');
          
          errorMessages.forEach(error => {
                error.style.display = 'none';
          });
          
          inputFields.forEach(input => {
                input.classList.remove('input-error');
          });
          
          // X√≥a th√¥ng b√°o l·ªói ·ªü ƒë·∫ßu form n·∫øu c√≥
          const formErrors = document.querySelectorAll('#signup-form > .error-message');
          formErrors.forEach(error => {
                error.remove();
          });
    }
    
    // H√†m reset form v√† th√¥ng b√°o l·ªói
    function resetForm() {
        resetErrorMessages();
        // Kh√¥ng reset gi√° tr·ªã form ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ ti·∫øp t·ª•c nh·∫≠p
    }

    // Focus v√†o tr∆∞·ªùng l·ªói ƒë·∫ßu ti√™n
    function focusFirstError() {
        const firstErrorField = document.querySelector('.input-error');
        if (firstErrorField) {
            firstErrorField.focus();
        }
    }

    // H√†m ki·ªÉm tra d·ªØ li·ªáu form
    function validateForm() {
        console.log("Starting form validation");
        let isValid = true;
        resetErrorMessages();
        
        // Ki·ªÉm tra t·ª´ng tr∆∞·ªùng b·∫Øt bu·ªôc
        // const requiredFields = form.querySelectorAll('[required]');
        const requiredFields = form.querySelectorAll('.required-field');
        console.log("Required fields count:", requiredFields.length);
    
        requiredFields.forEach(field => {
            console.log(`Validating field: ${field.id}, value: ${field.value.trim()}`);
            if (!validateField(field)) {
                console.log(`Field ${field.id} validation failed`);
                isValid = false;
            }
        });
        
        // Ki·ªÉm tra ng√†y sinh
        const dobDay = document.getElementById('dob-day').value;
        const dobMonth = document.getElementById('dob-month').value;
        const dobYear = document.getElementById('dob-year').value;  
        console.log(`Date of Birth: ${dobDay}/${dobMonth}/${dobYear}`);

        if (!dobDay || !dobMonth || !dobYear) {
            const errorMessage = document.createElement('div');
            errorMessage.className = 'error-message';
            errorMessage.textContent = 'Please select full date of birth';
            errorMessage.style.display = 'block';
          
            const dobContainer = document.getElementById('dob-day').parentNode;
            const existingError = dobContainer.querySelector('.error-message');
            if (existingError) {
                  existingError.style.display = 'block';
            } else {
                  dobContainer.appendChild(errorMessage);
            }
            isValid = false;
        } else {
            // N·∫øu ƒë√£ ƒëi·ªÅn ƒë·ªß ng√†y th√°ng nƒÉm, x√≥a th√¥ng b√°o l·ªói n·∫øu c√≥
            const dobContainer = document.getElementById('dob-day').parentNode;
            const existingError = dobContainer.querySelector('.error-message');
            if (existingError) {
                existingError.style.display = 'none';
            }
        }
        
        // Ki·ªÉm tra qu·ªëc gia
        const selectedCountry = document.getElementById('country').value;
        if (!selectedCountry) {
            const errorMessage = document.createElement('div');
            errorMessage.className = 'error-message';
            errorMessage.textContent = 'Please select country';
            errorMessage.style.display = 'block';
        
            const countryContainer = document.getElementById('country').parentNode;
            const existingError = countryContainer.querySelector('.error-message');
            if (existingError) {
                existingError.style.display = 'block';
            } else {
                countryContainer.appendChild(errorMessage);
            }
            isValid = false;
        } else {
            // N·∫øu ƒë√£ ch·ªçn qu·ªëc gia, x√≥a th√¥ng b√°o l·ªói n·∫øu c√≥
            const countryContainer = document.getElementById('country').parentNode;
            const existingError = countryContainer.querySelector('.error-message');
            if (existingError) {
                existingError.style.display = 'none';
            }
        }
        
        // Ki·ªÉm tra ƒë·ªìng √Ω ƒëi·ªÅu kho·∫£n
        const termsCheckbox = document.getElementById('terms');
        if (!termsCheckbox.checked) {
            const errorMessage = document.createElement('div');
            errorMessage.className = 'error-message';
            errorMessage.textContent = 'You must agree to the terms of use and privacy policy!';
            errorMessage.style.display = 'block';
        
            const termsContainer = termsCheckbox.parentNode;
            const existingError = termsContainer.querySelector('.error-message');
            if (existingError) {
                existingError.style.display = 'block';
            } else {
                termsContainer.appendChild(errorMessage);
            }
            isValid = false;
        } else {
            // N·∫øu ƒë√£ ƒë·ªìng √Ω ƒëi·ªÅu kho·∫£n, x√≥a th√¥ng b√°o l·ªói n·∫øu c√≥
            const termsContainer = termsCheckbox.parentNode;
            const existingError = termsContainer.querySelector('.error-message');
            if (existingError) {
                existingError.style.display = 'none';
            }
        }
        
        // Focus v√†o tr∆∞·ªùng l·ªói ƒë·∫ßu ti√™n n·∫øu c√≥
        if (!isValid) {
            focusFirstError();
        }
        console.log("Form validation result:", isValid);
        return isValid;
    }
    
    // H√†m x√≥a l·ªói ngay khi ng∆∞·ªùi d√πng nh·∫≠p
    function clearErrorOnInput() {
        // L·∫•y t·∫•t c·∫£ input c·ªßa form (text, password, select)
        const allInputs = document.querySelectorAll('#signup-form input[type="text"], #signup-form input[type="password"], #signup-form input[type="tel"], #signup-form select');
        
        // Th√™m event listener input cho t·∫•t c·∫£ c√°c input
        allInputs.forEach(input => {
            input.addEventListener('input', function() {
                // L·∫•y ph·∫ßn t·ª≠ error span li√™n k·∫øt v·ªõi input n√†y
                const errorSpan = document.getElementById(`${this.id}-error`);
                if (errorSpan) {
                    // ·∫®n th√¥ng b√°o l·ªói
                    errorSpan.style.display = 'none';
                    // X√≥a style l·ªói
                    this.classList.remove('input-error');
                }
            });
        });
        
        // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho checkbox v√† radio button
        const checkboxes = document.querySelectorAll('#signup-form input[type="checkbox"]');
        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                // T√¨m th√¥ng b√°o l·ªói g·∫ßn nh·∫•t trong container cha
                const container = this.parentNode;
                const errorMsg = container.querySelector('.error-message');
                if (errorMsg) {
                    errorMsg.style.display = 'none';
                }
            });
        });
        
        // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho c√°c tr∆∞·ªùng ng√†y th√°ng
        const dateFields = document.querySelectorAll('#dob-day, #dob-month, #dob-year');
        dateFields.forEach(field => {
            field.addEventListener('change', function() {
                // T√¨m b·∫•t k·ª≥ th√¥ng b√°o l·ªói li√™n quan ƒë·∫øn ng√†y
                const container = document.getElementById('dob-day').parentNode;
                const errorMsg = container.querySelector('.error-message');
                if (errorMsg) {
                    errorMsg.style.display = 'none';
                }
            });
        });

        // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho tr∆∞·ªùng qu·ªëc gia
        countrySelect.addEventListener('change', function() {
            const container = this.parentNode;
            const errorMsg = container.querySelector('.error-message');
            if (errorMsg) {
                errorMsg.style.display = 'none';
            }
        });
    }

    // G·ªçi h√†m clearErrorOnInput ƒë·ªÉ thi·∫øt l·∫≠p c√°c event listener
    clearErrorOnInput();
    
    document.getElementById("signup-form").addEventListener("submit", function(e) {
        e.preventDefault();
        console.log("Form submitted");
        console.log("Form validation result:", validateForm());
        
        // Log ra gi√° tr·ªã c·ªßa c√°c tr∆∞·ªùng quan tr·ªçng
        console.log("Username:", document.getElementById('username').value);
        console.log("Phone:", document.getElementById('phone').value);
        console.log("Password:", document.getElementById('password').value.replace(/./g, '*'));

        // Ki·ªÉm tra form tr∆∞·ªõc khi g·ª≠i
        if (!validateForm()) {
            console.log("Form validation failed");
            return; // D·ª´ng l·∫°i n·∫øu form kh√¥ng h·ª£p l·ªá
        }
    
        const form = e.target;
        const formData = new FormData(form);

        // L·∫•y m√£ ƒëi·ªán tho·∫°i qu·ªëc gia v√† s·ªë ƒëi·ªán tho·∫°i
        const countryCode = document.querySelector('.country-code').textContent;
        const phoneNumber = document.getElementById('phone').value;
        // K·∫øt h·ª£p m√£ qu·ªëc gia v√† s·ªë ƒëi·ªán tho·∫°i 
        const fullPhoneNumber = countryCode + phoneNumber;
        
        // Lo·∫°i b·ªè s·ªë ƒëi·ªán tho·∫°i c≈© v√† th√™m s·ªë ƒë·∫ßy ƒë·ªß
        formData.delete('phone');
        formData.append('phone', fullPhoneNumber);

        console.log("Full phone number to be saved:", fullPhoneNumber);

        fetch("model/signUp.php", {
              method: "POST",
              body: formData
        })
    
        .then(res => res.text())
        .then(data => {
              if (data.trim() === "success") {
                    successPopup.style.display = 'block';
                    popupOverlay.style.display = 'block';
                    form.reset(); 
              } else {
                    // Ki·ªÉm tra c√°c th√¥ng b√°o l·ªói c·ª• th·ªÉ
                    if (data.includes("username")) {
                        const usernameError = document.getElementById('username-error');
                        usernameError.textContent = "This account name is already in use";
                        usernameError.style.display = 'block';
                        document.getElementById('username').classList.add('input-error');
                        document.getElementById('username').focus();
                    } else if (data.includes("phone")) {
                        const phoneError = document.getElementById('phone-error');
                        phoneError.textContent = "This phone number is already in use";
                        phoneError.style.display = 'block';
                        document.getElementById('phone').classList.add('input-error');
                        document.getElementById('phone').focus();
                    } 
              }
        })
        .catch(err => {
              const errorDiv = document.createElement('div');
              errorDiv.className = 'error-message';
              errorDiv.style.display = 'block';
              errorDiv.style.marginBottom = '15px';
              errorDiv.textContent = "Network error: " + err;
              
              const formFirstChild = form.firstChild;
              form.insertBefore(errorDiv, formFirstChild);
        });
    });
});